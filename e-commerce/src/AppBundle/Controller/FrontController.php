<?php

namespace AppBundle\Controller;

use AppBundle\Entity\Avis;
use AppBundle\Entity\Categorie;
use AppBundle\Entity\Produit;
use Psr\Log\LoggerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Component\HttpFoundation\Request;
use Doctrine\DBAL\Connection;


class FrontController extends Controller
{
    /**
     * @Route("/acceuil",name="acceuil")
     */
    public function acceuilAction(LoggerInterface $logger)
    {
        $em = $this->getDoctrine()->getManager();
        $cats = $em->getRepository(Categorie::class)->findAll();
        $prod = $em->getRepository(Produit::class)->findAll();

        $pm =array();

        for ($i=0;$i<=2;$i++){
            $pm[] = rand(1,sizeof($prod));
            $logger->info($pm[$i]);
        }
        $slier = $em->getRepository(Produit::class)->getByIds($pm);
        $logger->info(sizeof($slier));
        return $this->render('Front/index.html.twig',array('cats' => $cats, 'prod' => $slier));
    }

    /**
     * @Route("/categorie/{slug}",name="front_cat")
     */
    public function categorieAction(string $slug)
    {
        $em = $this->getDoctrine()->getManager();

        $prod = $em->getRepository(Produit::class)->getByCat($slug);
        $cats = $em->getRepository(Categorie::class)->findAll();

        return $this->render('Front/cat.html.twig',array( 'prod' => $prod,'cats' => $cats));
    }

    /**
     * @Route("/categories",name="front_cats")
     */
    public function categoriesAction()
    {
        $em = $this->getDoctrine()->getManager();
        $cats = $em->getRepository(Categorie::class)->findAll();
        $prod = $em->getRepository(Produit::class)->findAll();
        return $this->render('Front/categories.html.twig',array('cats' => $cats, 'prod' => $prod));
    }

    /**
     * @Route("/produits/{slug}",name="produit")
     */
    public function produitAction(string $slug,LoggerInterface $logger)
    {
        $em = $this->getDoctrine()->getManager();
        $cats = $em->getRepository(Categorie::class)->findAll();

        $prod = $em->getRepository(Produit::class)->getByName($slug);
        $slugc = $prod->getCategories()[0]->getSlug();
        $prods = $em->getRepository(Produit::class)->getByCats($slugc,$slug);

            $logger->info(sizeof($prods));
        $logger->info($prod->getCategories()[0]->getLibelle());
        $avis = $prod->getAvis();
        $logger->info(sizeof($avis));
        return $this->render('Front/produit.html.twig',array('cats' => $cats, 'prod' => $prod, 'prods' => $prods,'avis' => $avis));
    }



    /**
     * @Route("/comment",name="comment")
     */
    public function commentAction(Request $request,LoggerInterface $logger)
    {
        $em = $this->getDoctrine()->getManager();
        $cats = $em->getRepository(Categorie::class)->findAll();
        $p = $em->getRepository(Produit::class)->find($request->get('id'));

        $a = new Avis();
        $a->setProp($request->get('prop'));
        $a->setAvis($request->get('Comment'));
        $a->setRate($request->get('stars'));
        $a->setProduitId($p);
        $logger->info($request->get('stars'));
        $logger->info($a);
        $em->persist($a);
        $em->flush();
        return $this->redirectToRoute('produit',array('slug' => $p->getSlug()));
    }
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }


}
